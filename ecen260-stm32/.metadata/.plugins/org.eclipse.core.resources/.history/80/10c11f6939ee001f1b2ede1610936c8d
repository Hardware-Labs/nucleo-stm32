/*
 * drivers.h
 *
 *  Created on: Feb 18, 2025
 *      Author: young
 */

#ifndef DRIVERS_H_
#define DRIVERS_H_

#include <stdint.h> // include standard integer library

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GPIO Port structure
////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct {
    uint32_t MODER;   // offset: 0x00
    uint32_t OTYPER;  // offset: 0x04
    uint32_t OSPEEDR; // offset: 0x08
    uint32_t PUPDR;   // offset: 0x0C
    uint32_t IDR;     // offset: 0x10
    uint32_t ODR;     // offset: 0x14
} Port;

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// address definitions
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Address of the Advanced High-performance Bus 2 Enable Register
#define AHB2ENR ((uint32_t*) 0x4002104c)

// Base addresses of the GPIO Port control registers (SFRs)
#define GPIOA ((Port*) 0x48000000) // base address of GPIOA
#define GPIOB ((Port*) 0x48000400) // base address of GPIOB
#define GPIOC ((Port*) 0x48000800) // base address of GPIOC


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// function prototypes
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GPIOA_ClkEnable(void);
void GPIOB_ClkEnable(void);
void GPIOC_ClkEnable(void);
void GPIO_Mode(Port* GPIOx, uint32_t pin, uint32_t mode);
void GPIO_Toggle(Port* GPIOx, uint32_t pin);


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Value macros for MODER
////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define GPIO_MODE_INPUT 0
#define GPIO_MODE_OUTPUT 1

#endif /* DRIVERS_H_ */
