
#include <stdint.h> // include standard integer library

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GPIO Port structure
////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct {
    uint32_t MODER;   // offset: 0x00
    uint32_t OTYPER;  // offset: 0x04
    uint32_t OSPEEDR; // offset: 0x08
    uint32_t PUPDR;   // offset: 0x0C
    uint32_t IDR;     // offset: 0x10
    uint32_t ODR;     // offset: 0x14
} Port;

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// address definitions
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Address of the Advanced High-performance Bus 2 Enable Register
uint32_t* AHB2ENR = (uint32_t*) 0x4002104c;

// Base addresses of the GPIO Port control registers (SFRs)
Port* GPIOA = (Port*) 0x48000000; // base address of GPIOA
Port* GPIOB = (Port*) 0x48000400; // base address of GPIOB
Port* GPIOC = (Port*) 0x48000800; // base address of GPIOC


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// function prototypes
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GPIOA_ClkEnable(void);
void GPIOB_ClkEnable(void);
void GPIOC_ClkEnable(void);
void GPIO_Mode(Port* GPIOx, uint32_t pin, uint32_t mode);
void GPIO_Toggle(Port* GPIOx, uint32_t pin);


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Value macros for MODER
////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define GPIO_MODE_INPUT 0
#define GPIO_MODE_OUTPUT 1


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This program blinks LED2 (PA5)
////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void) {
	//Turn on GPIO clock for Port A
	GPIOA_ClkEnable();


	// Configure LED2 as output
	GPIO_Mode(GPIOA, 5, GPIO_MODE_OUTPUT);


	while(1) {
		// toggle LED
		GPIO_Toggle(GPIOA, 5);

		// delay
		for (int i = 0; i < 80000; i++);
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enables the clock for GPIOA, GPIOB, and GPIOC
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GPIOA_ClkEnable(void) {
	*AHB2ENR |= 0b001; // set bit 0 for Port A
}

void GPIOB_ClkEnable(void) {
	*AHB2ENR |= 0b010; // set bit 1 for Port B
}

void GPIOC_ClkEnable(void) {
	*AHB2ENR |= 0b100; // set bit 2 for Port C
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// configure MODER of a given port for a given pin as an input or output
// - mode: GPIO_MODE_INPUT, GPIO_MODE_OUTPUT
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GPIO_Mode(Port* GPIOx, uint32_t pin, uint32_t mode) {
	switch (mode) {
	case GPIO_MODE_INPUT:
		// TODO
		break;
	case GPIO_MODE_OUTPUT:
		// output is 01 for the pin in MODER
		uint32_t temp = GPIOx->MODER;	// read the MODER
		temp &= ~(0b10 << (pin*2)); 	// reset upper bit
		temp |= (0b01 << (pin*2)); 		// set lower bit
		GPIOx->MODER = temp; 			// clock in entire configuration in 1 clock cycle to avoid glitches
		break;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// toggle the value of a given output pin of given port
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GPIO_Toggle(Port* GPIOx, uint32_t pin) {
	GPIOx->ODR ^= (1 << pin); // toggle the bit
}
