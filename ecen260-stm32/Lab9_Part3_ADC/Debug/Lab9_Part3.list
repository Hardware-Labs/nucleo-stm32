
Lab9_Part3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003754  08003754  00004754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003794  08003794  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003794  08003794  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003794  08003794  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003794  08003794  00004794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003798  08003798  00004798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800379c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080037a8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080037a8  00005090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a16e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a09  00000000  00000000  0000f1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00010bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c0  00000000  00000000  00011600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026143  00000000  00000000  00011dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae15  00000000  00000000  00037f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1dbc  00000000  00000000  00042d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134ad4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f0  00000000  00000000  00134b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00137508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800373c 	.word	0x0800373c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800373c 	.word	0x0800373c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa37 	bl	8000640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f819 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8df 	bl	8000398 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001da:	f000 f867 	bl	80002ac <MX_ADC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Start ADC Conversion
	  HAL_ADC_Start(&hadc1);
 80001de:	4809      	ldr	r0, [pc, #36]	@ (8000204 <main+0x3c>)
 80001e0:	f000 fe02 	bl	8000de8 <HAL_ADC_Start>
	  // Wait for ADC conversion to complete
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80001e4:	f04f 31ff 	mov.w	r1, #4294967295
 80001e8:	4806      	ldr	r0, [pc, #24]	@ (8000204 <main+0x3c>)
 80001ea:	f000 feb7 	bl	8000f5c <HAL_ADC_PollForConversion>
	  // Read ADC value
	  uint16_t analog_measurement = HAL_ADC_GetValue(&hadc1);
 80001ee:	4805      	ldr	r0, [pc, #20]	@ (8000204 <main+0x3c>)
 80001f0:	f000 ff8c 	bl	800110c <HAL_ADC_GetValue>
 80001f4:	4603      	mov	r3, r0
 80001f6:	80fb      	strh	r3, [r7, #6]
	  // Delay 1 ms
	  HAL_Delay(1);
 80001f8:	2001      	movs	r0, #1
 80001fa:	f000 fa9d 	bl	8000738 <HAL_Delay>
  {
 80001fe:	bf00      	nop
 8000200:	e7ed      	b.n	80001de <main+0x16>
 8000202:	bf00      	nop
 8000204:	20000028 	.word	0x20000028

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b096      	sub	sp, #88	@ 0x58
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0314 	add.w	r3, r7, #20
 8000212:	2244      	movs	r2, #68	@ 0x44
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fa64 	bl	80036e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800022a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800022e:	f001 ff7f 	bl	8002130 <HAL_PWREx_ControlVoltageScaling>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000238:	f000 f904 	bl	8000444 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023c:	2302      	movs	r3, #2
 800023e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000240:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000244:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000246:	2310      	movs	r3, #16
 8000248:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800024e:	2302      	movs	r3, #2
 8000250:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000252:	2301      	movs	r3, #1
 8000254:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000256:	230a      	movs	r3, #10
 8000258:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800025a:	2307      	movs	r3, #7
 800025c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800025e:	2302      	movs	r3, #2
 8000260:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000262:	2302      	movs	r3, #2
 8000264:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0314 	add.w	r3, r7, #20
 800026a:	4618      	mov	r0, r3
 800026c:	f001 ffb6 	bl	80021dc <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000276:	f000 f8e5 	bl	8000444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2303      	movs	r3, #3
 8000280:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800028e:	463b      	mov	r3, r7
 8000290:	2104      	movs	r1, #4
 8000292:	4618      	mov	r0, r3
 8000294:	f002 fb7e 	bl	8002994 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800029e:	f000 f8d1 	bl	8000444 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3758      	adds	r7, #88	@ 0x58
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08a      	sub	sp, #40	@ 0x28
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002b2:	f107 031c 	add.w	r3, r7, #28
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
 80002cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ce:	4b2f      	ldr	r3, [pc, #188]	@ (800038c <MX_ADC1_Init+0xe0>)
 80002d0:	4a2f      	ldr	r2, [pc, #188]	@ (8000390 <MX_ADC1_Init+0xe4>)
 80002d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002d4:	4b2d      	ldr	r3, [pc, #180]	@ (800038c <MX_ADC1_Init+0xe0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002da:	4b2c      	ldr	r3, [pc, #176]	@ (800038c <MX_ADC1_Init+0xe0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e0:	4b2a      	ldr	r3, [pc, #168]	@ (800038c <MX_ADC1_Init+0xe0>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002e6:	4b29      	ldr	r3, [pc, #164]	@ (800038c <MX_ADC1_Init+0xe0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002ec:	4b27      	ldr	r3, [pc, #156]	@ (800038c <MX_ADC1_Init+0xe0>)
 80002ee:	2204      	movs	r2, #4
 80002f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002f2:	4b26      	ldr	r3, [pc, #152]	@ (800038c <MX_ADC1_Init+0xe0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002f8:	4b24      	ldr	r3, [pc, #144]	@ (800038c <MX_ADC1_Init+0xe0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002fe:	4b23      	ldr	r3, [pc, #140]	@ (800038c <MX_ADC1_Init+0xe0>)
 8000300:	2201      	movs	r2, #1
 8000302:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000304:	4b21      	ldr	r3, [pc, #132]	@ (800038c <MX_ADC1_Init+0xe0>)
 8000306:	2200      	movs	r2, #0
 8000308:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800030c:	4b1f      	ldr	r3, [pc, #124]	@ (800038c <MX_ADC1_Init+0xe0>)
 800030e:	2200      	movs	r2, #0
 8000310:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000312:	4b1e      	ldr	r3, [pc, #120]	@ (800038c <MX_ADC1_Init+0xe0>)
 8000314:	2200      	movs	r2, #0
 8000316:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000318:	4b1c      	ldr	r3, [pc, #112]	@ (800038c <MX_ADC1_Init+0xe0>)
 800031a:	2200      	movs	r2, #0
 800031c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000320:	4b1a      	ldr	r3, [pc, #104]	@ (800038c <MX_ADC1_Init+0xe0>)
 8000322:	2200      	movs	r2, #0
 8000324:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000326:	4b19      	ldr	r3, [pc, #100]	@ (800038c <MX_ADC1_Init+0xe0>)
 8000328:	2200      	movs	r2, #0
 800032a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800032e:	4817      	ldr	r0, [pc, #92]	@ (800038c <MX_ADC1_Init+0xe0>)
 8000330:	f000 fc0a 	bl	8000b48 <HAL_ADC_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800033a:	f000 f883 	bl	8000444 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000342:	f107 031c 	add.w	r3, r7, #28
 8000346:	4619      	mov	r1, r3
 8000348:	4810      	ldr	r0, [pc, #64]	@ (800038c <MX_ADC1_Init+0xe0>)
 800034a:	f001 fb8b 	bl	8001a64 <HAL_ADCEx_MultiModeConfigChannel>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000354:	f000 f876 	bl	8000444 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000358:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <MX_ADC1_Init+0xe8>)
 800035a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800035c:	2306      	movs	r3, #6
 800035e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000364:	237f      	movs	r3, #127	@ 0x7f
 8000366:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000368:	2304      	movs	r3, #4
 800036a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	4619      	mov	r1, r3
 8000374:	4805      	ldr	r0, [pc, #20]	@ (800038c <MX_ADC1_Init+0xe0>)
 8000376:	f000 fed7 	bl	8001128 <HAL_ADC_ConfigChannel>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000380:	f000 f860 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	3728      	adds	r7, #40	@ 0x28
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000028 	.word	0x20000028
 8000390:	50040000 	.word	0x50040000
 8000394:	14f00020 	.word	0x14f00020

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08a      	sub	sp, #40	@ 0x28
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0314 	add.w	r3, r7, #20
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ae:	4b24      	ldr	r3, [pc, #144]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b2:	4a23      	ldr	r2, [pc, #140]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ba:	4b21      	ldr	r3, [pc, #132]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003be:	f003 0304 	and.w	r3, r3, #4
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b18      	ldr	r3, [pc, #96]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	4a17      	ldr	r2, [pc, #92]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ea:	4b15      	ldr	r3, [pc, #84]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f6:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fa:	4a11      	ldr	r2, [pc, #68]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003fc:	f043 0302 	orr.w	r3, r3, #2
 8000400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <MX_GPIO_Init+0xa8>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000406:	f003 0302 	and.w	r3, r3, #2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2120      	movs	r1, #32
 8000412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000416:	f001 fe65 	bl	80020e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800041a:	2320      	movs	r3, #32
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041e:	2301      	movs	r3, #1
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000426:	2300      	movs	r3, #0
 8000428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	4619      	mov	r1, r3
 8000430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000434:	f001 fcac 	bl	8001d90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000438:	bf00      	nop
 800043a:	3728      	adds	r7, #40	@ 0x28
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <Error_Handler+0x8>

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <HAL_MspInit+0x44>)
 8000458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800045a:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <HAL_MspInit+0x44>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6613      	str	r3, [r2, #96]	@ 0x60
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <HAL_MspInit+0x44>)
 8000464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <HAL_MspInit+0x44>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000472:	4a08      	ldr	r2, [pc, #32]	@ (8000494 <HAL_MspInit+0x44>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000478:	6593      	str	r3, [r2, #88]	@ 0x58
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <HAL_MspInit+0x44>)
 800047c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800047e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b0ac      	sub	sp, #176	@ 0xb0
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	2288      	movs	r2, #136	@ 0x88
 80004b6:	2100      	movs	r1, #0
 80004b8:	4618      	mov	r0, r3
 80004ba:	f003 f913 	bl	80036e4 <memset>
  if(hadc->Instance==ADC1)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a27      	ldr	r2, [pc, #156]	@ (8000560 <HAL_ADC_MspInit+0xc8>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d147      	bne.n	8000558 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80004cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80004ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80004da:	2301      	movs	r3, #1
 80004dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80004de:	2308      	movs	r3, #8
 80004e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80004e2:	2307      	movs	r3, #7
 80004e4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80004e6:	2302      	movs	r3, #2
 80004e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80004ea:	2302      	movs	r3, #2
 80004ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80004ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80004f2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	4618      	mov	r0, r3
 80004fa:	f002 fc37 	bl	8002d6c <HAL_RCCEx_PeriphCLKConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000504:	f7ff ff9e 	bl	8000444 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000508:	4b16      	ldr	r3, [pc, #88]	@ (8000564 <HAL_ADC_MspInit+0xcc>)
 800050a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050c:	4a15      	ldr	r2, [pc, #84]	@ (8000564 <HAL_ADC_MspInit+0xcc>)
 800050e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000512:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000514:	4b13      	ldr	r3, [pc, #76]	@ (8000564 <HAL_ADC_MspInit+0xcc>)
 8000516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <HAL_ADC_MspInit+0xcc>)
 8000522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000524:	4a0f      	ldr	r2, [pc, #60]	@ (8000564 <HAL_ADC_MspInit+0xcc>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052c:	4b0d      	ldr	r3, [pc, #52]	@ (8000564 <HAL_ADC_MspInit+0xcc>)
 800052e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000538:	2301      	movs	r3, #1
 800053a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800053e:	230b      	movs	r3, #11
 8000540:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f001 fc1c 	bl	8001d90 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000558:	bf00      	nop
 800055a:	37b0      	adds	r7, #176	@ 0xb0
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	50040000 	.word	0x50040000
 8000564:	40021000 	.word	0x40021000

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <NMI_Handler+0x4>

08000570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <HardFault_Handler+0x4>

08000578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <MemManage_Handler+0x4>

08000580 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <UsageFault_Handler+0x4>

08000590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005be:	f000 f89b 	bl	80006f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <SystemInit+0x20>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a05      	ldr	r2, [pc, #20]	@ (80005e8 <SystemInit+0x20>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000624 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f0:	f7ff ffea 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f4:	480c      	ldr	r0, [pc, #48]	@ (8000628 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f6:	490d      	ldr	r1, [pc, #52]	@ (800062c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <LoopForever+0xe>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005fc:	e002      	b.n	8000604 <LoopCopyDataInit>

080005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000602:	3304      	adds	r3, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000608:	d3f9      	bcc.n	80005fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060a:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <LoopForever+0x12>)
  ldr r4, =_ebss
 800060c:	4c0a      	ldr	r4, [pc, #40]	@ (8000638 <LoopForever+0x16>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000610:	e001      	b.n	8000616 <LoopFillZerobss>

08000612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000614:	3204      	adds	r2, #4

08000616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000618:	d3fb      	bcc.n	8000612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061a:	f003 f86b 	bl	80036f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800061e:	f7ff fdd3 	bl	80001c8 <main>

08000622 <LoopForever>:

LoopForever:
    b LoopForever
 8000622:	e7fe      	b.n	8000622 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000624:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000630:	0800379c 	.word	0x0800379c
  ldr r2, =_sbss
 8000634:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000638:	20000090 	.word	0x20000090

0800063c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC1_2_IRQHandler>
	...

08000640 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000646:	2300      	movs	r3, #0
 8000648:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <HAL_Init+0x3c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a0b      	ldr	r2, [pc, #44]	@ (800067c <HAL_Init+0x3c>)
 8000650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000654:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000656:	2003      	movs	r0, #3
 8000658:	f001 fb66 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800065c:	2000      	movs	r0, #0
 800065e:	f000 f80f 	bl	8000680 <HAL_InitTick>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	e001      	b.n	8000672 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800066e:	f7ff feef 	bl	8000450 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000672:	79fb      	ldrb	r3, [r7, #7]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800068c:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <HAL_InitTick+0x6c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d023      	beq.n	80006dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <HAL_InitTick+0x70>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <HAL_InitTick+0x6c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fb63 	bl	8001d76 <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d10f      	bne.n	80006d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b0f      	cmp	r3, #15
 80006ba:	d809      	bhi.n	80006d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006bc:	2200      	movs	r2, #0
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295
 80006c4:	f001 fb3b 	bl	8001d3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c8:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <HAL_InitTick+0x74>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	e007      	b.n	80006e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	e004      	b.n	80006e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e001      	b.n	80006e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000008 	.word	0x20000008
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000004 	.word	0x20000004

080006f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <HAL_IncTick+0x20>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <HAL_IncTick+0x24>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a04      	ldr	r2, [pc, #16]	@ (800071c <HAL_IncTick+0x24>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000008 	.word	0x20000008
 800071c:	2000008c 	.word	0x2000008c

08000720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;
 8000724:	4b03      	ldr	r3, [pc, #12]	@ (8000734 <HAL_GetTick+0x14>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	2000008c 	.word	0x2000008c

08000738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000740:	f7ff ffee 	bl	8000720 <HAL_GetTick>
 8000744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000750:	d005      	beq.n	800075e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <HAL_Delay+0x44>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4413      	add	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800075e:	bf00      	nop
 8000760:	f7ff ffde 	bl	8000720 <HAL_GetTick>
 8000764:	4602      	mov	r2, r0
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	429a      	cmp	r2, r3
 800076e:	d8f7      	bhi.n	8000760 <HAL_Delay+0x28>
  {
  }
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000008 	.word	0x20000008

08000780 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	431a      	orrs	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	609a      	str	r2, [r3, #8]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	431a      	orrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	609a      	str	r2, [r3, #8]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3360      	adds	r3, #96	@ 0x60
 80007fa:	461a      	mov	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <LL_ADC_SetOffset+0x44>)
 800080a:	4013      	ands	r3, r2
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	430a      	orrs	r2, r1
 8000816:	4313      	orrs	r3, r2
 8000818:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000820:	bf00      	nop
 8000822:	371c      	adds	r7, #28
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	03fff000 	.word	0x03fff000

08000830 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3360      	adds	r3, #96	@ 0x60
 800083e:	461a      	mov	r2, r3
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3360      	adds	r3, #96	@ 0x60
 800086c:	461a      	mov	r2, r3
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	431a      	orrs	r2, r3
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000886:	bf00      	nop
 8000888:	371c      	adds	r7, #28
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80008a6:	2301      	movs	r3, #1
 80008a8:	e000      	b.n	80008ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3330      	adds	r3, #48	@ 0x30
 80008c8:	461a      	mov	r2, r3
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	f003 030c 	and.w	r3, r3, #12
 80008d4:	4413      	add	r3, r2
 80008d6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	f003 031f 	and.w	r3, r3, #31
 80008e2:	211f      	movs	r1, #31
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	401a      	ands	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	0e9b      	lsrs	r3, r3, #26
 80008f0:	f003 011f 	and.w	r1, r3, #31
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	f003 031f 	and.w	r3, r3, #31
 80008fa:	fa01 f303 	lsl.w	r3, r1, r3
 80008fe:	431a      	orrs	r2, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000904:	bf00      	nop
 8000906:	371c      	adds	r7, #28
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000910:	b480      	push	{r7}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3314      	adds	r3, #20
 8000920:	461a      	mov	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	0e5b      	lsrs	r3, r3, #25
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	4413      	add	r3, r2
 800092e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	0d1b      	lsrs	r3, r3, #20
 8000938:	f003 031f 	and.w	r3, r3, #31
 800093c:	2107      	movs	r1, #7
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	401a      	ands	r2, r3
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	0d1b      	lsrs	r3, r3, #20
 800094a:	f003 031f 	and.w	r3, r3, #31
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	431a      	orrs	r2, r3
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800095a:	bf00      	nop
 800095c:	371c      	adds	r7, #28
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000980:	43db      	mvns	r3, r3
 8000982:	401a      	ands	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0318 	and.w	r3, r3, #24
 800098a:	4908      	ldr	r1, [pc, #32]	@ (80009ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800098c:	40d9      	lsrs	r1, r3
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	400b      	ands	r3, r1
 8000992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000996:	431a      	orrs	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	0007ffff 	.word	0x0007ffff

080009b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	f003 031f 	and.w	r3, r3, #31
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80009f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	6093      	str	r3, [r2, #8]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a20:	d101      	bne.n	8000a26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000a44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000a70:	d101      	bne.n	8000a76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a98:	f043 0201 	orr.w	r2, r3, #1
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d101      	bne.n	8000ac4 <LL_ADC_IsEnabled+0x18>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <LL_ADC_IsEnabled+0x1a>
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ae6:	f043 0204 	orr.w	r2, r3, #4
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d101      	bne.n	8000b12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f003 0308 	and.w	r3, r3, #8
 8000b30:	2b08      	cmp	r3, #8
 8000b32:	d101      	bne.n	8000b38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b089      	sub	sp, #36	@ 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e130      	b.n	8000dc4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d109      	bne.n	8000b84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fc91 	bl	8000498 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff3f 	bl	8000a0c <LL_ADC_IsDeepPowerDownEnabled>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d004      	beq.n	8000b9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff25 	bl	80009e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff5a 	bl	8000a5c <LL_ADC_IsInternalRegulatorEnabled>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d115      	bne.n	8000bda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff3e 	bl	8000a34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000bb8:	4b84      	ldr	r3, [pc, #528]	@ (8000dcc <HAL_ADC_Init+0x284>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	099b      	lsrs	r3, r3, #6
 8000bbe:	4a84      	ldr	r2, [pc, #528]	@ (8000dd0 <HAL_ADC_Init+0x288>)
 8000bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc4:	099b      	lsrs	r3, r3, #6
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000bcc:	e002      	b.n	8000bd4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1f9      	bne.n	8000bce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff3c 	bl	8000a5c <LL_ADC_IsInternalRegulatorEnabled>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10d      	bne.n	8000c06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bee:	f043 0210 	orr.w	r2, r3, #16
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	f043 0201 	orr.w	r2, r3, #1
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff75 	bl	8000afa <LL_ADC_REG_IsConversionOngoing>
 8000c10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f040 80c9 	bne.w	8000db2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 80c5 	bne.w	8000db2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c30:	f043 0202 	orr.w	r2, r3, #2
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff35 	bl	8000aac <LL_ADC_IsEnabled>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d115      	bne.n	8000c74 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c48:	4862      	ldr	r0, [pc, #392]	@ (8000dd4 <HAL_ADC_Init+0x28c>)
 8000c4a:	f7ff ff2f 	bl	8000aac <LL_ADC_IsEnabled>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	4861      	ldr	r0, [pc, #388]	@ (8000dd8 <HAL_ADC_Init+0x290>)
 8000c52:	f7ff ff2b 	bl	8000aac <LL_ADC_IsEnabled>
 8000c56:	4603      	mov	r3, r0
 8000c58:	431c      	orrs	r4, r3
 8000c5a:	4860      	ldr	r0, [pc, #384]	@ (8000ddc <HAL_ADC_Init+0x294>)
 8000c5c:	f7ff ff26 	bl	8000aac <LL_ADC_IsEnabled>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4323      	orrs	r3, r4
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d105      	bne.n	8000c74 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	485c      	ldr	r0, [pc, #368]	@ (8000de0 <HAL_ADC_Init+0x298>)
 8000c70:	f7ff fd86 	bl	8000780 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7e5b      	ldrb	r3, [r3, #25]
 8000c78:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c7e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000c84:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000c8a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c92:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c94:	4313      	orrs	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d106      	bne.n	8000cb0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	045b      	lsls	r3, r3, #17
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d009      	beq.n	8000ccc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cbc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	4b44      	ldr	r3, [pc, #272]	@ (8000de4 <HAL_ADC_Init+0x29c>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	69b9      	ldr	r1, [r7, #24]
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff1b 	bl	8000b20 <LL_ADC_INJ_IsConversionOngoing>
 8000cea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d13d      	bne.n	8000d6e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d13a      	bne.n	8000d6e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000cfc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d04:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d14:	f023 0302 	bic.w	r3, r3, #2
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	6812      	ldr	r2, [r2, #0]
 8000d1c:	69b9      	ldr	r1, [r7, #24]
 8000d1e:	430b      	orrs	r3, r1
 8000d20:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d118      	bne.n	8000d5e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000d36:	f023 0304 	bic.w	r3, r3, #4
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000d42:	4311      	orrs	r1, r2
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000d48:	4311      	orrs	r1, r2
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	431a      	orrs	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0201 	orr.w	r2, r2, #1
 8000d5a:	611a      	str	r2, [r3, #16]
 8000d5c:	e007      	b.n	8000d6e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0201 	bic.w	r2, r2, #1
 8000d6c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d10c      	bne.n	8000d90 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	f023 010f 	bic.w	r1, r3, #15
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69db      	ldr	r3, [r3, #28]
 8000d84:	1e5a      	subs	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d8e:	e007      	b.n	8000da0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 020f 	bic.w	r2, r2, #15
 8000d9e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000da4:	f023 0303 	bic.w	r3, r3, #3
 8000da8:	f043 0201 	orr.w	r2, r3, #1
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	655a      	str	r2, [r3, #84]	@ 0x54
 8000db0:	e007      	b.n	8000dc2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000db6:	f043 0210 	orr.w	r2, r3, #16
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000dc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3724      	adds	r7, #36	@ 0x24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	053e2d63 	.word	0x053e2d63
 8000dd4:	50040000 	.word	0x50040000
 8000dd8:	50040100 	.word	0x50040100
 8000ddc:	50040200 	.word	0x50040200
 8000de0:	50040300 	.word	0x50040300
 8000de4:	fff0c007 	.word	0xfff0c007

08000de8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000df0:	4857      	ldr	r0, [pc, #348]	@ (8000f50 <HAL_ADC_Start+0x168>)
 8000df2:	f7ff fddd 	bl	80009b0 <LL_ADC_GetMultimode>
 8000df6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe7c 	bl	8000afa <LL_ADC_REG_IsConversionOngoing>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f040 809c 	bne.w	8000f42 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_ADC_Start+0x30>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e097      	b.n	8000f48 <HAL_ADC_Start+0x160>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 fd73 	bl	800190c <ADC_Enable>
 8000e26:	4603      	mov	r3, r0
 8000e28:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8083 	bne.w	8000f38 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e3a:	f023 0301 	bic.w	r3, r3, #1
 8000e3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a42      	ldr	r2, [pc, #264]	@ (8000f54 <HAL_ADC_Start+0x16c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d002      	beq.n	8000e56 <HAL_ADC_Start+0x6e>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	e000      	b.n	8000e58 <HAL_ADC_Start+0x70>
 8000e56:	4b40      	ldr	r3, [pc, #256]	@ (8000f58 <HAL_ADC_Start+0x170>)
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d002      	beq.n	8000e66 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d105      	bne.n	8000e72 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e6a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e7e:	d106      	bne.n	8000e8e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e84:	f023 0206 	bic.w	r2, r3, #6
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8000e8c:	e002      	b.n	8000e94 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	221c      	movs	r2, #28
 8000e9a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8000f54 <HAL_ADC_Start+0x16c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d002      	beq.n	8000eb4 <HAL_ADC_Start+0xcc>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	e000      	b.n	8000eb6 <HAL_ADC_Start+0xce>
 8000eb4:	4b28      	ldr	r3, [pc, #160]	@ (8000f58 <HAL_ADC_Start+0x170>)
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d008      	beq.n	8000ed0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d005      	beq.n	8000ed0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	d002      	beq.n	8000ed0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	2b09      	cmp	r3, #9
 8000ece:	d114      	bne.n	8000efa <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d007      	beq.n	8000eee <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ee2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ee6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fded 	bl	8000ad2 <LL_ADC_REG_StartConversion>
 8000ef8:	e025      	b.n	8000f46 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000efe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <HAL_ADC_Start+0x16c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d002      	beq.n	8000f16 <HAL_ADC_Start+0x12e>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	e000      	b.n	8000f18 <HAL_ADC_Start+0x130>
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <HAL_ADC_Start+0x170>)
 8000f18:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00f      	beq.n	8000f46 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f2a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f2e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f36:	e006      	b.n	8000f46 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000f40:	e001      	b.n	8000f46 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f42:	2302      	movs	r3, #2
 8000f44:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	50040300 	.word	0x50040300
 8000f54:	50040100 	.word	0x50040100
 8000f58:	50040000 	.word	0x50040000

08000f5c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f66:	4866      	ldr	r0, [pc, #408]	@ (8001100 <HAL_ADC_PollForConversion+0x1a4>)
 8000f68:	f7ff fd22 	bl	80009b0 <LL_ADC_GetMultimode>
 8000f6c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d102      	bne.n	8000f7c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000f76:	2308      	movs	r3, #8
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e02a      	b.n	8000fd2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d002      	beq.n	8000f8e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b09      	cmp	r3, #9
 8000f8c:	d111      	bne.n	8000fb2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d007      	beq.n	8000fac <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa0:	f043 0220 	orr.w	r2, r3, #32
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e0a4      	b.n	80010f6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000fac:	2304      	movs	r3, #4
 8000fae:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000fb0:	e00f      	b.n	8000fd2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000fb2:	4853      	ldr	r0, [pc, #332]	@ (8001100 <HAL_ADC_PollForConversion+0x1a4>)
 8000fb4:	f7ff fd0a 	bl	80009cc <LL_ADC_GetMultiDMATransfer>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fc2:	f043 0220 	orr.w	r2, r3, #32
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e093      	b.n	80010f6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000fce:	2304      	movs	r3, #4
 8000fd0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fd2:	f7ff fba5 	bl	8000720 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000fd8:	e021      	b.n	800101e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d01d      	beq.n	800101e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000fe2:	f7ff fb9d 	bl	8000720 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d302      	bcc.n	8000ff8 <HAL_ADC_PollForConversion+0x9c>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d112      	bne.n	800101e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	4013      	ands	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10b      	bne.n	800101e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800100a:	f043 0204 	orr.w	r2, r3, #4
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e06b      	b.n	80010f6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	4013      	ands	r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0d6      	beq.n	8000fda <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001030:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fc28 	bl	8000892 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d01c      	beq.n	8001082 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7e5b      	ldrb	r3, [r3, #25]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d118      	bne.n	8001082 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b08      	cmp	r3, #8
 800105c:	d111      	bne.n	8001082 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001062:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800106e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d105      	bne.n	8001082 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a1f      	ldr	r2, [pc, #124]	@ (8001104 <HAL_ADC_PollForConversion+0x1a8>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d002      	beq.n	8001092 <HAL_ADC_PollForConversion+0x136>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	e000      	b.n	8001094 <HAL_ADC_PollForConversion+0x138>
 8001092:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <HAL_ADC_PollForConversion+0x1ac>)
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	4293      	cmp	r3, r2
 800109a:	d008      	beq.n	80010ae <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d002      	beq.n	80010ae <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2b09      	cmp	r3, #9
 80010ac:	d104      	bne.n	80010b8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	e00c      	b.n	80010d2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a11      	ldr	r2, [pc, #68]	@ (8001104 <HAL_ADC_PollForConversion+0x1a8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d002      	beq.n	80010c8 <HAL_ADC_PollForConversion+0x16c>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	e000      	b.n	80010ca <HAL_ADC_PollForConversion+0x16e>
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <HAL_ADC_PollForConversion+0x1ac>)
 80010ca:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d104      	bne.n	80010e2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2208      	movs	r2, #8
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e008      	b.n	80010f4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d103      	bne.n	80010f4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	220c      	movs	r2, #12
 80010f2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	50040300 	.word	0x50040300
 8001104:	50040100 	.word	0x50040100
 8001108:	50040000 	.word	0x50040000

0800110c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0b6      	sub	sp, #216	@ 0xd8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001142:	2b01      	cmp	r3, #1
 8001144:	d101      	bne.n	800114a <HAL_ADC_ConfigChannel+0x22>
 8001146:	2302      	movs	r3, #2
 8001148:	e3c9      	b.n	80018de <HAL_ADC_ConfigChannel+0x7b6>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fccf 	bl	8000afa <LL_ADC_REG_IsConversionOngoing>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 83aa 	bne.w	80018b8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b05      	cmp	r3, #5
 8001172:	d824      	bhi.n	80011be <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	3b02      	subs	r3, #2
 800117a:	2b03      	cmp	r3, #3
 800117c:	d81b      	bhi.n	80011b6 <HAL_ADC_ConfigChannel+0x8e>
 800117e:	a201      	add	r2, pc, #4	@ (adr r2, 8001184 <HAL_ADC_ConfigChannel+0x5c>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	08001195 	.word	0x08001195
 8001188:	0800119d 	.word	0x0800119d
 800118c:	080011a5 	.word	0x080011a5
 8001190:	080011ad 	.word	0x080011ad
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001194:	230c      	movs	r3, #12
 8001196:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800119a:	e010      	b.n	80011be <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800119c:	2312      	movs	r3, #18
 800119e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80011a2:	e00c      	b.n	80011be <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80011a4:	2318      	movs	r3, #24
 80011a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80011aa:	e008      	b.n	80011be <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80011ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80011b4:	e003      	b.n	80011be <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80011b6:	2306      	movs	r3, #6
 80011b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80011bc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80011cc:	f7ff fb74 	bl	80008b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fc90 	bl	8000afa <LL_ADC_REG_IsConversionOngoing>
 80011da:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fc9c 	bl	8000b20 <LL_ADC_INJ_IsConversionOngoing>
 80011e8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f040 81a4 	bne.w	800153e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 819f 	bne.w	800153e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	6819      	ldr	r1, [r3, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	461a      	mov	r2, r3
 800120e:	f7ff fb7f 	bl	8000910 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d00a      	beq.n	800124a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	6919      	ldr	r1, [r3, #16]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001244:	f7ff fad0 	bl	80007e8 <LL_ADC_SetOffset>
 8001248:	e179      	b.n	800153e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff faed 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10a      	bne.n	8001276 <HAL_ADC_ConfigChannel+0x14e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fae2 	bl	8000830 <LL_ADC_GetOffsetChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	0e9b      	lsrs	r3, r3, #26
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	e01e      	b.n	80012b4 <HAL_ADC_ConfigChannel+0x18c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fad7 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001288:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001298:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800129c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80012a4:	2320      	movs	r3, #32
 80012a6:	e004      	b.n	80012b2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80012a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x1a4>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	0e9b      	lsrs	r3, r3, #26
 80012c6:	f003 031f 	and.w	r3, r3, #31
 80012ca:	e018      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1d6>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80012e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80012e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80012f0:	2320      	movs	r3, #32
 80012f2:	e004      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80012f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012f8:	fab3 f383 	clz	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80012fe:	429a      	cmp	r2, r3
 8001300:	d106      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff faa6 	bl	800085c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2101      	movs	r1, #1
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fa8a 	bl	8000830 <LL_ADC_GetOffsetChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10a      	bne.n	800133c <HAL_ADC_ConfigChannel+0x214>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2101      	movs	r1, #1
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fa7f 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	0e9b      	lsrs	r3, r3, #26
 8001336:	f003 021f 	and.w	r2, r3, #31
 800133a:	e01e      	b.n	800137a <HAL_ADC_ConfigChannel+0x252>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fa74 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800135a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800135e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800136a:	2320      	movs	r3, #32
 800136c:	e004      	b.n	8001378 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800136e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001382:	2b00      	cmp	r3, #0
 8001384:	d105      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x26a>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	0e9b      	lsrs	r3, r3, #26
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	e018      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x29c>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80013a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80013ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80013b6:	2320      	movs	r3, #32
 80013b8:	e004      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80013ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d106      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	2101      	movs	r1, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fa43 	bl	800085c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2102      	movs	r1, #2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fa27 	bl	8000830 <LL_ADC_GetOffsetChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10a      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x2da>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2102      	movs	r1, #2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fa1c 	bl	8000830 <LL_ADC_GetOffsetChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	0e9b      	lsrs	r3, r3, #26
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	e01e      	b.n	8001440 <HAL_ADC_ConfigChannel+0x318>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2102      	movs	r1, #2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fa11 	bl	8000830 <LL_ADC_GetOffsetChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001420:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001424:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001430:	2320      	movs	r3, #32
 8001432:	e004      	b.n	800143e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001448:	2b00      	cmp	r3, #0
 800144a:	d105      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x330>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0e9b      	lsrs	r3, r3, #26
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	e014      	b.n	8001482 <HAL_ADC_ConfigChannel+0x35a>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800146c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001474:	2320      	movs	r3, #32
 8001476:	e004      	b.n	8001482 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001478:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001482:	429a      	cmp	r2, r3
 8001484:	d106      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2200      	movs	r2, #0
 800148c:	2102      	movs	r1, #2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f9e4 	bl	800085c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2103      	movs	r1, #3
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f9c8 	bl	8000830 <LL_ADC_GetOffsetChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10a      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x398>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2103      	movs	r1, #3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f9bd 	bl	8000830 <LL_ADC_GetOffsetChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	0e9b      	lsrs	r3, r3, #26
 80014ba:	f003 021f 	and.w	r2, r3, #31
 80014be:	e017      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x3c8>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2103      	movs	r1, #3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f9b2 	bl	8000830 <LL_ADC_GetOffsetChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80014d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014da:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80014dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80014e2:	2320      	movs	r3, #32
 80014e4:	e003      	b.n	80014ee <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80014e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014e8:	fab3 f383 	clz	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d105      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x3e0>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0e9b      	lsrs	r3, r3, #26
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	e011      	b.n	800152c <HAL_ADC_ConfigChannel+0x404>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001516:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001518:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800151a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001520:	2320      	movs	r3, #32
 8001522:	e003      	b.n	800152c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001524:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800152c:	429a      	cmp	r2, r3
 800152e:	d106      	bne.n	800153e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	2103      	movs	r1, #3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f98f 	bl	800085c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fab2 	bl	8000aac <LL_ADC_IsEnabled>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 8140 	bne.w	80017d0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6819      	ldr	r1, [r3, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	461a      	mov	r2, r3
 800155e:	f7ff fa03 	bl	8000968 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	4a8f      	ldr	r2, [pc, #572]	@ (80017a4 <HAL_ADC_ConfigChannel+0x67c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	f040 8131 	bne.w	80017d0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10b      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x46e>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0e9b      	lsrs	r3, r3, #26
 8001584:	3301      	adds	r3, #1
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	2b09      	cmp	r3, #9
 800158c:	bf94      	ite	ls
 800158e:	2301      	movls	r3, #1
 8001590:	2300      	movhi	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	e019      	b.n	80015ca <HAL_ADC_ConfigChannel+0x4a2>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80015a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80015a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80015ae:	2320      	movs	r3, #32
 80015b0:	e003      	b.n	80015ba <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80015b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	bf94      	ite	ls
 80015c4:	2301      	movls	r3, #1
 80015c6:	2300      	movhi	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d079      	beq.n	80016c2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d107      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x4c2>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	0e9b      	lsrs	r3, r3, #26
 80015e0:	3301      	adds	r3, #1
 80015e2:	069b      	lsls	r3, r3, #26
 80015e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015e8:	e015      	b.n	8001616 <HAL_ADC_ConfigChannel+0x4ee>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80015f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80015fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001602:	2320      	movs	r3, #32
 8001604:	e003      	b.n	800160e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001608:	fab3 f383 	clz	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	3301      	adds	r3, #1
 8001610:	069b      	lsls	r3, r3, #26
 8001612:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x50e>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0e9b      	lsrs	r3, r3, #26
 8001628:	3301      	adds	r3, #1
 800162a:	f003 031f 	and.w	r3, r3, #31
 800162e:	2101      	movs	r1, #1
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	e017      	b.n	8001666 <HAL_ADC_ConfigChannel+0x53e>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001646:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800164e:	2320      	movs	r3, #32
 8001650:	e003      	b.n	800165a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	3301      	adds	r3, #1
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	2101      	movs	r1, #1
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	ea42 0103 	orr.w	r1, r2, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10a      	bne.n	800168c <HAL_ADC_ConfigChannel+0x564>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0e9b      	lsrs	r3, r3, #26
 800167c:	3301      	adds	r3, #1
 800167e:	f003 021f 	and.w	r2, r3, #31
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	051b      	lsls	r3, r3, #20
 800168a:	e018      	b.n	80016be <HAL_ADC_ConfigChannel+0x596>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800169a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800169e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80016a4:	2320      	movs	r3, #32
 80016a6:	e003      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80016a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	f003 021f 	and.w	r2, r3, #31
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016be:	430b      	orrs	r3, r1
 80016c0:	e081      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d107      	bne.n	80016de <HAL_ADC_ConfigChannel+0x5b6>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0e9b      	lsrs	r3, r3, #26
 80016d4:	3301      	adds	r3, #1
 80016d6:	069b      	lsls	r3, r3, #26
 80016d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016dc:	e015      	b.n	800170a <HAL_ADC_ConfigChannel+0x5e2>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80016f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80016f6:	2320      	movs	r3, #32
 80016f8:	e003      	b.n	8001702 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80016fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	3301      	adds	r3, #1
 8001704:	069b      	lsls	r3, r3, #26
 8001706:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_ADC_ConfigChannel+0x602>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	0e9b      	lsrs	r3, r3, #26
 800171c:	3301      	adds	r3, #1
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	e017      	b.n	800175a <HAL_ADC_ConfigChannel+0x632>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	61bb      	str	r3, [r7, #24]
  return result;
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001742:	2320      	movs	r3, #32
 8001744:	e003      	b.n	800174e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	fab3 f383 	clz	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	3301      	adds	r3, #1
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	2101      	movs	r1, #1
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	ea42 0103 	orr.w	r1, r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10d      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x65e>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0e9b      	lsrs	r3, r3, #26
 8001770:	3301      	adds	r3, #1
 8001772:	f003 021f 	and.w	r2, r3, #31
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	3b1e      	subs	r3, #30
 800177e:	051b      	lsls	r3, r3, #20
 8001780:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001784:	e01e      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x69c>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	60fb      	str	r3, [r7, #12]
  return result;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d104      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800179e:	2320      	movs	r3, #32
 80017a0:	e006      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x688>
 80017a2:	bf00      	nop
 80017a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	f003 021f 	and.w	r2, r3, #31
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	3b1e      	subs	r3, #30
 80017be:	051b      	lsls	r3, r3, #20
 80017c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff f8a0 	bl	8000910 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b44      	ldr	r3, [pc, #272]	@ (80018e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d07a      	beq.n	80018d2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017dc:	4843      	ldr	r0, [pc, #268]	@ (80018ec <HAL_ADC_ConfigChannel+0x7c4>)
 80017de:	f7fe fff5 	bl	80007cc <LL_ADC_GetCommonPathInternalCh>
 80017e2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a41      	ldr	r2, [pc, #260]	@ (80018f0 <HAL_ADC_ConfigChannel+0x7c8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d12c      	bne.n	800184a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80017f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d126      	bne.n	800184a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a3c      	ldr	r2, [pc, #240]	@ (80018f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d004      	beq.n	8001810 <HAL_ADC_ConfigChannel+0x6e8>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a3b      	ldr	r2, [pc, #236]	@ (80018f8 <HAL_ADC_ConfigChannel+0x7d0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d15d      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001810:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001814:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001818:	4619      	mov	r1, r3
 800181a:	4834      	ldr	r0, [pc, #208]	@ (80018ec <HAL_ADC_ConfigChannel+0x7c4>)
 800181c:	f7fe ffc3 	bl	80007a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001820:	4b36      	ldr	r3, [pc, #216]	@ (80018fc <HAL_ADC_ConfigChannel+0x7d4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	099b      	lsrs	r3, r3, #6
 8001826:	4a36      	ldr	r2, [pc, #216]	@ (8001900 <HAL_ADC_ConfigChannel+0x7d8>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800183a:	e002      	b.n	8001842 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	3b01      	subs	r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f9      	bne.n	800183c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001848:	e040      	b.n	80018cc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a2d      	ldr	r2, [pc, #180]	@ (8001904 <HAL_ADC_ConfigChannel+0x7dc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d118      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001858:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d112      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a23      	ldr	r2, [pc, #140]	@ (80018f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d004      	beq.n	8001874 <HAL_ADC_ConfigChannel+0x74c>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a22      	ldr	r2, [pc, #136]	@ (80018f8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d12d      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001878:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800187c:	4619      	mov	r1, r3
 800187e:	481b      	ldr	r0, [pc, #108]	@ (80018ec <HAL_ADC_ConfigChannel+0x7c4>)
 8001880:	f7fe ff91 	bl	80007a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001884:	e024      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1f      	ldr	r2, [pc, #124]	@ (8001908 <HAL_ADC_ConfigChannel+0x7e0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d120      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001894:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d11a      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a14      	ldr	r2, [pc, #80]	@ (80018f4 <HAL_ADC_ConfigChannel+0x7cc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d115      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018ae:	4619      	mov	r1, r3
 80018b0:	480e      	ldr	r0, [pc, #56]	@ (80018ec <HAL_ADC_ConfigChannel+0x7c4>)
 80018b2:	f7fe ff78 	bl	80007a6 <LL_ADC_SetCommonPathInternalCh>
 80018b6:	e00c      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018bc:	f043 0220 	orr.w	r2, r3, #32
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80018ca:	e002      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018cc:	bf00      	nop
 80018ce:	e000      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80018da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80018de:	4618      	mov	r0, r3
 80018e0:	37d8      	adds	r7, #216	@ 0xd8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	80080000 	.word	0x80080000
 80018ec:	50040300 	.word	0x50040300
 80018f0:	c7520000 	.word	0xc7520000
 80018f4:	50040000 	.word	0x50040000
 80018f8:	50040200 	.word	0x50040200
 80018fc:	20000000 	.word	0x20000000
 8001900:	053e2d63 	.word	0x053e2d63
 8001904:	cb840000 	.word	0xcb840000
 8001908:	80000001 	.word	0x80000001

0800190c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff f8c5 	bl	8000aac <LL_ADC_IsEnabled>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d169      	bne.n	80019fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	4b36      	ldr	r3, [pc, #216]	@ (8001a08 <ADC_Enable+0xfc>)
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00d      	beq.n	8001952 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e055      	b.n	80019fe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f894 	bl	8000a84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800195c:	482b      	ldr	r0, [pc, #172]	@ (8001a0c <ADC_Enable+0x100>)
 800195e:	f7fe ff35 	bl	80007cc <LL_ADC_GetCommonPathInternalCh>
 8001962:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001964:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <ADC_Enable+0x104>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	4a28      	ldr	r2, [pc, #160]	@ (8001a14 <ADC_Enable+0x108>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	099b      	lsrs	r3, r3, #6
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001986:	e002      	b.n	800198e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	3b01      	subs	r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f9      	bne.n	8001988 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001994:	f7fe fec4 	bl	8000720 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800199a:	e028      	b.n	80019ee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff f883 	bl	8000aac <LL_ADC_IsEnabled>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d104      	bne.n	80019b6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f867 	bl	8000a84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019b6:	f7fe feb3 	bl	8000720 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d914      	bls.n	80019ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d00d      	beq.n	80019ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d6:	f043 0210 	orr.w	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e2:	f043 0201 	orr.w	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e007      	b.n	80019fe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d1cf      	bne.n	800199c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	8000003f 	.word	0x8000003f
 8001a0c:	50040300 	.word	0x50040300
 8001a10:	20000000 	.word	0x20000000
 8001a14:	053e2d63 	.word	0x053e2d63

08001a18 <LL_ADC_IsEnabled>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_IsEnabled+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_IsEnabled+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_REG_IsConversionOngoing>:
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b09f      	sub	sp, #124	@ 0x7c
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e093      	b.n	8001baa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a47      	ldr	r2, [pc, #284]	@ (8001bb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d102      	bne.n	8001aa2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001a9c:	4b46      	ldr	r3, [pc, #280]	@ (8001bb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	e001      	b.n	8001aa6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e072      	b.n	8001baa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ffb9 	bl	8001a3e <LL_ADC_REG_IsConversionOngoing>
 8001acc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ffb3 	bl	8001a3e <LL_ADC_REG_IsConversionOngoing>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d154      	bne.n	8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001ade:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d151      	bne.n	8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ae4:	4b35      	ldr	r3, [pc, #212]	@ (8001bbc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d02c      	beq.n	8001b4a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b02:	035b      	lsls	r3, r3, #13
 8001b04:	430b      	orrs	r3, r1
 8001b06:	431a      	orrs	r2, r3
 8001b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b0c:	4829      	ldr	r0, [pc, #164]	@ (8001bb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b0e:	f7ff ff83 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b12:	4604      	mov	r4, r0
 8001b14:	4828      	ldr	r0, [pc, #160]	@ (8001bb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b16:	f7ff ff7f 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	431c      	orrs	r4, r3
 8001b1e:	4828      	ldr	r0, [pc, #160]	@ (8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001b20:	f7ff ff7a 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4323      	orrs	r3, r4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d137      	bne.n	8001b9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001b34:	f023 030f 	bic.w	r3, r3, #15
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	6811      	ldr	r1, [r2, #0]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	6892      	ldr	r2, [r2, #8]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	431a      	orrs	r2, r3
 8001b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b46:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b48:	e028      	b.n	8001b9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b54:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b56:	4817      	ldr	r0, [pc, #92]	@ (8001bb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b58:	f7ff ff5e 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	4816      	ldr	r0, [pc, #88]	@ (8001bb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b60:	f7ff ff5a 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b64:	4603      	mov	r3, r0
 8001b66:	431c      	orrs	r4, r3
 8001b68:	4815      	ldr	r0, [pc, #84]	@ (8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001b6a:	f7ff ff55 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4323      	orrs	r3, r4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d112      	bne.n	8001b9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001b7e:	f023 030f 	bic.w	r3, r3, #15
 8001b82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001b84:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b86:	e009      	b.n	8001b9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8c:	f043 0220 	orr.w	r2, r3, #32
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001b9a:	e000      	b.n	8001b9e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ba6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	377c      	adds	r7, #124	@ 0x7c
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	50040000 	.word	0x50040000
 8001bb8:	50040100 	.word	0x50040100
 8001bbc:	50040300 	.word	0x50040300
 8001bc0:	50040200 	.word	0x50040200

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	@ (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	@ (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	@ (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	@ 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	@ 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f7ff ff8e 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	@ (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff47 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff5c 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff8e 	bl	8001c7c <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5d 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffb0 	bl	8001ce4 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9e:	e17f      	b.n	80020a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8171 	beq.w	800209a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d005      	beq.n	8001dd0 <HAL_GPIO_Init+0x40>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d130      	bne.n	8001e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e06:	2201      	movs	r2, #1
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 0201 	and.w	r2, r3, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d118      	bne.n	8001e70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e44:	2201      	movs	r2, #1
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	f003 0201 	and.w	r2, r3, #1
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d017      	beq.n	8001eac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d123      	bne.n	8001f00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	08da      	lsrs	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3208      	adds	r2, #8
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	220f      	movs	r2, #15
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	6939      	ldr	r1, [r7, #16]
 8001efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0203 	and.w	r2, r3, #3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80ac 	beq.w	800209a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	4b5f      	ldr	r3, [pc, #380]	@ (80020c0 <HAL_GPIO_Init+0x330>)
 8001f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f46:	4a5e      	ldr	r2, [pc, #376]	@ (80020c0 <HAL_GPIO_Init+0x330>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f4e:	4b5c      	ldr	r3, [pc, #368]	@ (80020c0 <HAL_GPIO_Init+0x330>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f5a:	4a5a      	ldr	r2, [pc, #360]	@ (80020c4 <HAL_GPIO_Init+0x334>)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	220f      	movs	r2, #15
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f84:	d025      	beq.n	8001fd2 <HAL_GPIO_Init+0x242>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4f      	ldr	r2, [pc, #316]	@ (80020c8 <HAL_GPIO_Init+0x338>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <HAL_GPIO_Init+0x23e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4e      	ldr	r2, [pc, #312]	@ (80020cc <HAL_GPIO_Init+0x33c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_GPIO_Init+0x23a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4d      	ldr	r2, [pc, #308]	@ (80020d0 <HAL_GPIO_Init+0x340>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x236>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80020d4 <HAL_GPIO_Init+0x344>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x232>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80020d8 <HAL_GPIO_Init+0x348>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x22e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80020dc <HAL_GPIO_Init+0x34c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x22a>
 8001fb6:	2306      	movs	r3, #6
 8001fb8:	e00c      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fba:	2307      	movs	r3, #7
 8001fbc:	e00a      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	e008      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e004      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	f002 0203 	and.w	r2, r2, #3
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	4093      	lsls	r3, r2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe4:	4937      	ldr	r1, [pc, #220]	@ (80020c4 <HAL_GPIO_Init+0x334>)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002016:	4a32      	ldr	r2, [pc, #200]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800201c:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002040:	4a27      	ldr	r2, [pc, #156]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002046:	4b26      	ldr	r3, [pc, #152]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800206a:	4a1d      	ldr	r2, [pc, #116]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002094:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f47f ae78 	bne.w	8001da0 <HAL_GPIO_Init+0x10>
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800
 80020d0:	48000c00 	.word	0x48000c00
 80020d4:	48001000 	.word	0x48001000
 80020d8:	48001400 	.word	0x48001400
 80020dc:	48001800 	.word	0x48001800
 80020e0:	40010400 	.word	0x40010400

080020e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
 80020f0:	4613      	mov	r3, r2
 80020f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f4:	787b      	ldrb	r3, [r7, #1]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002100:	e002      	b.n	8002108 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <HAL_PWREx_GetVoltageRange+0x18>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40007000 	.word	0x40007000

08002130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800213e:	d130      	bne.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002140:	4b23      	ldr	r3, [pc, #140]	@ (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800214c:	d038      	beq.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800214e:	4b20      	ldr	r3, [pc, #128]	@ (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002156:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002158:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800215c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800215e:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2232      	movs	r2, #50	@ 0x32
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	4a1b      	ldr	r2, [pc, #108]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9b      	lsrs	r3, r3, #18
 8002170:	3301      	adds	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002174:	e002      	b.n	800217c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3b01      	subs	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800217c:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002188:	d102      	bne.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x60>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f2      	bne.n	8002176 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800219c:	d110      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e00f      	b.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021a2:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ae:	d007      	beq.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021b0:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021b8:	4a05      	ldr	r2, [pc, #20]	@ (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40007000 	.word	0x40007000
 80021d4:	20000000 	.word	0x20000000
 80021d8:	431bde83 	.word	0x431bde83

080021dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e3ca      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ee:	4b97      	ldr	r3, [pc, #604]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f8:	4b94      	ldr	r3, [pc, #592]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80e4 	beq.w	80023d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_RCC_OscConfig+0x4a>
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b0c      	cmp	r3, #12
 800221a:	f040 808b 	bne.w	8002334 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b01      	cmp	r3, #1
 8002222:	f040 8087 	bne.w	8002334 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002226:	4b89      	ldr	r3, [pc, #548]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_RCC_OscConfig+0x62>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e3a2      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	4b82      	ldr	r3, [pc, #520]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d004      	beq.n	8002258 <HAL_RCC_OscConfig+0x7c>
 800224e:	4b7f      	ldr	r3, [pc, #508]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002256:	e005      	b.n	8002264 <HAL_RCC_OscConfig+0x88>
 8002258:	4b7c      	ldr	r3, [pc, #496]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 800225a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002264:	4293      	cmp	r3, r2
 8002266:	d223      	bcs.n	80022b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fd1d 	bl	8002cac <RCC_SetFlashLatencyFromMSIRange>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e383      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800227c:	4b73      	ldr	r3, [pc, #460]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a72      	ldr	r2, [pc, #456]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b70      	ldr	r3, [pc, #448]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	496d      	ldr	r1, [pc, #436]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800229a:	4b6c      	ldr	r3, [pc, #432]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	4968      	ldr	r1, [pc, #416]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
 80022ae:	e025      	b.n	80022fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b0:	4b66      	ldr	r3, [pc, #408]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a65      	ldr	r2, [pc, #404]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80022b6:	f043 0308 	orr.w	r3, r3, #8
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b63      	ldr	r3, [pc, #396]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4960      	ldr	r1, [pc, #384]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ce:	4b5f      	ldr	r3, [pc, #380]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	495b      	ldr	r1, [pc, #364]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d109      	bne.n	80022fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fcdd 	bl	8002cac <RCC_SetFlashLatencyFromMSIRange>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e343      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022fc:	f000 fc4a 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b52      	ldr	r3, [pc, #328]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	4950      	ldr	r1, [pc, #320]	@ (8002450 <HAL_RCC_OscConfig+0x274>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	4a4e      	ldr	r2, [pc, #312]	@ (8002454 <HAL_RCC_OscConfig+0x278>)
 800231a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800231c:	4b4e      	ldr	r3, [pc, #312]	@ (8002458 <HAL_RCC_OscConfig+0x27c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f9ad 	bl	8000680 <HAL_InitTick>
 8002326:	4603      	mov	r3, r0
 8002328:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d052      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	e327      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d032      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800233c:	4b43      	ldr	r3, [pc, #268]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a42      	ldr	r2, [pc, #264]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002348:	f7fe f9ea 	bl	8000720 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002350:	f7fe f9e6 	bl	8000720 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e310      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002362:	4b3a      	ldr	r3, [pc, #232]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236e:	4b37      	ldr	r3, [pc, #220]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a36      	ldr	r2, [pc, #216]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b34      	ldr	r3, [pc, #208]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4931      	ldr	r1, [pc, #196]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238c:	4b2f      	ldr	r3, [pc, #188]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	492c      	ldr	r1, [pc, #176]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
 80023a0:	e01a      	b.n	80023d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023a2:	4b2a      	ldr	r3, [pc, #168]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a29      	ldr	r2, [pc, #164]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ae:	f7fe f9b7 	bl	8000720 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b6:	f7fe f9b3 	bl	8000720 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e2dd      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023c8:	4b20      	ldr	r3, [pc, #128]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x1da>
 80023d4:	e000      	b.n	80023d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d074      	beq.n	80024ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x21a>
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d10e      	bne.n	800240e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d10b      	bne.n	800240e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d064      	beq.n	80024cc <HAL_RCC_OscConfig+0x2f0>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d160      	bne.n	80024cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e2ba      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x24a>
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0b      	ldr	r2, [pc, #44]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 800241e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	e026      	b.n	8002474 <HAL_RCC_OscConfig+0x298>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800242e:	d115      	bne.n	800245c <HAL_RCC_OscConfig+0x280>
 8002430:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a05      	ldr	r2, [pc, #20]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002436:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b03      	ldr	r3, [pc, #12]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a02      	ldr	r2, [pc, #8]	@ (800244c <HAL_RCC_OscConfig+0x270>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x298>
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	08003754 	.word	0x08003754
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004
 800245c:	4ba0      	ldr	r3, [pc, #640]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a9f      	ldr	r2, [pc, #636]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b9d      	ldr	r3, [pc, #628]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a9c      	ldr	r2, [pc, #624]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe f950 	bl	8000720 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe f94c 	bl	8000720 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	@ 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e276      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002496:	4b92      	ldr	r3, [pc, #584]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x2a8>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe f93c 	bl	8000720 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe f938 	bl	8000720 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e262      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024be:	4b88      	ldr	r3, [pc, #544]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x2d0>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d060      	beq.n	800259c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d005      	beq.n	80024ec <HAL_RCC_OscConfig+0x310>
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d119      	bne.n	800251a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d116      	bne.n	800251a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ec:	4b7c      	ldr	r3, [pc, #496]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_OscConfig+0x328>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e23f      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b76      	ldr	r3, [pc, #472]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	4973      	ldr	r1, [pc, #460]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002518:	e040      	b.n	800259c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d023      	beq.n	800256a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002522:	4b6f      	ldr	r3, [pc, #444]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6e      	ldr	r2, [pc, #440]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7fe f8f7 	bl	8000720 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002536:	f7fe f8f3 	bl	8000720 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e21d      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002548:	4b65      	ldr	r3, [pc, #404]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b62      	ldr	r3, [pc, #392]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	495f      	ldr	r1, [pc, #380]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
 8002568:	e018      	b.n	800259c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256a:	4b5d      	ldr	r3, [pc, #372]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a5c      	ldr	r2, [pc, #368]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe f8d3 	bl	8000720 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257e:	f7fe f8cf 	bl	8000720 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1f9      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002590:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f0      	bne.n	800257e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d03c      	beq.n	8002622 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01c      	beq.n	80025ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b0:	4b4b      	ldr	r3, [pc, #300]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80025b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025b6:	4a4a      	ldr	r2, [pc, #296]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7fe f8ae 	bl	8000720 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c8:	f7fe f8aa 	bl	8000720 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1d4      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025da:	4b41      	ldr	r3, [pc, #260]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ef      	beq.n	80025c8 <HAL_RCC_OscConfig+0x3ec>
 80025e8:	e01b      	b.n	8002622 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ea:	4b3d      	ldr	r3, [pc, #244]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80025ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f0:	4a3b      	ldr	r2, [pc, #236]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7fe f891 	bl	8000720 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002602:	f7fe f88d 	bl	8000720 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e1b7      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002614:	4b32      	ldr	r3, [pc, #200]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ef      	bne.n	8002602 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80a6 	beq.w	800277c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002630:	2300      	movs	r3, #0
 8002632:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002634:	4b2a      	ldr	r3, [pc, #168]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10d      	bne.n	800265c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002640:	4b27      	ldr	r3, [pc, #156]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002644:	4a26      	ldr	r2, [pc, #152]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264a:	6593      	str	r3, [r2, #88]	@ 0x58
 800264c:	4b24      	ldr	r3, [pc, #144]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002658:	2301      	movs	r3, #1
 800265a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265c:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <HAL_RCC_OscConfig+0x508>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d118      	bne.n	800269a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002668:	4b1e      	ldr	r3, [pc, #120]	@ (80026e4 <HAL_RCC_OscConfig+0x508>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1d      	ldr	r2, [pc, #116]	@ (80026e4 <HAL_RCC_OscConfig+0x508>)
 800266e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002672:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002674:	f7fe f854 	bl	8000720 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267c:	f7fe f850 	bl	8000720 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e17a      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268e:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <HAL_RCC_OscConfig+0x508>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d108      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4d8>
 80026a2:	4b0f      	ldr	r3, [pc, #60]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026b2:	e029      	b.n	8002708 <HAL_RCC_OscConfig+0x52c>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d115      	bne.n	80026e8 <HAL_RCC_OscConfig+0x50c>
 80026bc:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c2:	4a07      	ldr	r2, [pc, #28]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026cc:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	4a03      	ldr	r2, [pc, #12]	@ (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026dc:	e014      	b.n	8002708 <HAL_RCC_OscConfig+0x52c>
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40007000 	.word	0x40007000
 80026e8:	4b9c      	ldr	r3, [pc, #624]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ee:	4a9b      	ldr	r2, [pc, #620]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f8:	4b98      	ldr	r3, [pc, #608]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fe:	4a97      	ldr	r2, [pc, #604]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d016      	beq.n	800273e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe f806 	bl	8000720 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe f802 	bl	8000720 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e12a      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272e:	4b8b      	ldr	r3, [pc, #556]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ed      	beq.n	8002718 <HAL_RCC_OscConfig+0x53c>
 800273c:	e015      	b.n	800276a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fd ffef 	bl	8000720 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fd ffeb 	bl	8000720 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e113      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800275c:	4b7f      	ldr	r3, [pc, #508]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ed      	bne.n	8002746 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800276a:	7ffb      	ldrb	r3, [r7, #31]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002770:	4b7a      	ldr	r3, [pc, #488]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 8002772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002774:	4a79      	ldr	r2, [pc, #484]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 8002776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800277a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80fe 	beq.w	8002982 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	2b02      	cmp	r3, #2
 800278c:	f040 80d0 	bne.w	8002930 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002790:	4b72      	ldr	r3, [pc, #456]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f003 0203 	and.w	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d130      	bne.n	8002806 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	3b01      	subs	r3, #1
 80027b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d127      	bne.n	8002806 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d11f      	bne.n	8002806 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027d0:	2a07      	cmp	r2, #7
 80027d2:	bf14      	ite	ne
 80027d4:	2201      	movne	r2, #1
 80027d6:	2200      	moveq	r2, #0
 80027d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027da:	4293      	cmp	r3, r2
 80027dc:	d113      	bne.n	8002806 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	3b01      	subs	r3, #1
 80027ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	085b      	lsrs	r3, r3, #1
 80027fe:	3b01      	subs	r3, #1
 8002800:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d06e      	beq.n	80028e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d069      	beq.n	80028e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800280c:	4b53      	ldr	r3, [pc, #332]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002818:	4b50      	ldr	r3, [pc, #320]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0ad      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002828:	4b4c      	ldr	r3, [pc, #304]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a4b      	ldr	r2, [pc, #300]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 800282e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002832:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002834:	f7fd ff74 	bl	8000720 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7fd ff70 	bl	8000720 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e09a      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284e:	4b43      	ldr	r3, [pc, #268]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800285a:	4b40      	ldr	r3, [pc, #256]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	4b40      	ldr	r3, [pc, #256]	@ (8002960 <HAL_RCC_OscConfig+0x784>)
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800286a:	3a01      	subs	r2, #1
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	4311      	orrs	r1, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002874:	0212      	lsls	r2, r2, #8
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800287c:	0852      	lsrs	r2, r2, #1
 800287e:	3a01      	subs	r2, #1
 8002880:	0552      	lsls	r2, r2, #21
 8002882:	4311      	orrs	r1, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002888:	0852      	lsrs	r2, r2, #1
 800288a:	3a01      	subs	r2, #1
 800288c:	0652      	lsls	r2, r2, #25
 800288e:	4311      	orrs	r1, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002894:	0912      	lsrs	r2, r2, #4
 8002896:	0452      	lsls	r2, r2, #17
 8002898:	430a      	orrs	r2, r1
 800289a:	4930      	ldr	r1, [pc, #192]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 800289c:	4313      	orrs	r3, r2
 800289e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028a0:	4b2e      	ldr	r3, [pc, #184]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2d      	ldr	r2, [pc, #180]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ac:	4b2b      	ldr	r3, [pc, #172]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a2a      	ldr	r2, [pc, #168]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80028b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028b8:	f7fd ff32 	bl	8000720 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fd ff2e 	bl	8000720 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e058      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d2:	4b22      	ldr	r3, [pc, #136]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028de:	e050      	b.n	8002982 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e04f      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e4:	4b1d      	ldr	r3, [pc, #116]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d148      	bne.n	8002982 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028f0:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a19      	ldr	r2, [pc, #100]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80028f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028fc:	4b17      	ldr	r3, [pc, #92]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a16      	ldr	r2, [pc, #88]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 8002902:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002906:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002908:	f7fd ff0a 	bl	8000720 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7fd ff06 	bl	8000720 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e030      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002922:	4b0e      	ldr	r3, [pc, #56]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x734>
 800292e:	e028      	b.n	8002982 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d023      	beq.n	800297e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a08      	ldr	r2, [pc, #32]	@ (800295c <HAL_RCC_OscConfig+0x780>)
 800293c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7fd feed 	bl	8000720 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002948:	e00c      	b.n	8002964 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7fd fee9 	bl	8000720 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d905      	bls.n	8002964 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e013      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
 800295c:	40021000 	.word	0x40021000
 8002960:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002964:	4b09      	ldr	r3, [pc, #36]	@ (800298c <HAL_RCC_OscConfig+0x7b0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ec      	bne.n	800294a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_RCC_OscConfig+0x7b0>)
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	4905      	ldr	r1, [pc, #20]	@ (800298c <HAL_RCC_OscConfig+0x7b0>)
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_RCC_OscConfig+0x7b4>)
 8002978:	4013      	ands	r3, r2
 800297a:	60cb      	str	r3, [r1, #12]
 800297c:	e001      	b.n	8002982 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	feeefffc 	.word	0xfeeefffc

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0e7      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b75      	ldr	r3, [pc, #468]	@ (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d910      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b72      	ldr	r3, [pc, #456]	@ (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 0207 	bic.w	r2, r3, #7
 80029be:	4970      	ldr	r1, [pc, #448]	@ (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b6e      	ldr	r3, [pc, #440]	@ (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0cf      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	4b66      	ldr	r3, [pc, #408]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d908      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b63      	ldr	r3, [pc, #396]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4960      	ldr	r1, [pc, #384]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d04c      	beq.n	8002aac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1a:	4b5a      	ldr	r3, [pc, #360]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d121      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0a6      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a32:	4b54      	ldr	r3, [pc, #336]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d115      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e09a      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e08e      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e086      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b46      	ldr	r3, [pc, #280]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4943      	ldr	r1, [pc, #268]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7c:	f7fd fe50 	bl	8000720 <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7fd fe4c 	bl	8000720 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e06e      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d010      	beq.n	8002ada <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	4b31      	ldr	r3, [pc, #196]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d208      	bcs.n	8002ada <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	492b      	ldr	r1, [pc, #172]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ada:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d210      	bcs.n	8002b0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae8:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 0207 	bic.w	r2, r3, #7
 8002af0:	4923      	ldr	r1, [pc, #140]	@ (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af8:	4b21      	ldr	r3, [pc, #132]	@ (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e036      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b16:	4b1b      	ldr	r3, [pc, #108]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4918      	ldr	r1, [pc, #96]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b34:	4b13      	ldr	r3, [pc, #76]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4910      	ldr	r1, [pc, #64]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b48:	f000 f824 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	490b      	ldr	r1, [pc, #44]	@ (8002b88 <HAL_RCC_ClockConfig+0x1f4>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	4a09      	ldr	r2, [pc, #36]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f8>)
 8002b66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b68:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <HAL_RCC_ClockConfig+0x1fc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fd87 	bl	8000680 <HAL_InitTick>
 8002b72:	4603      	mov	r3, r0
 8002b74:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b76:	7afb      	ldrb	r3, [r7, #11]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40021000 	.word	0x40021000
 8002b88:	08003754 	.word	0x08003754
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	20000004 	.word	0x20000004

08002b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	@ 0x24
 8002b98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bac:	4b3b      	ldr	r3, [pc, #236]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d121      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d11e      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bc8:	4b34      	ldr	r3, [pc, #208]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bd4:	4b31      	ldr	r3, [pc, #196]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e005      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002be4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d102      	bne.n	8002c12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	e004      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c18:	4b23      	ldr	r3, [pc, #140]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d134      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c22:	4b1e      	ldr	r3, [pc, #120]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0xa6>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d003      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0xac>
 8002c38:	e005      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c3c:	617b      	str	r3, [r7, #20]
      break;
 8002c3e:	e005      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c42:	617b      	str	r3, [r7, #20]
      break;
 8002c44:	e002      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	617b      	str	r3, [r7, #20]
      break;
 8002c4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c4c:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	3301      	adds	r3, #1
 8002c58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c5a:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	fb03 f202 	mul.w	r2, r3, r2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c72:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	0e5b      	lsrs	r3, r3, #25
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3724      	adds	r7, #36	@ 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08003764 	.word	0x08003764
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	007a1200 	.word	0x007a1200

08002cac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cc4:	f7ff fa26 	bl	8002114 <HAL_PWREx_GetVoltageRange>
 8002cc8:	6178      	str	r0, [r7, #20]
 8002cca:	e014      	b.n	8002cf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ccc:	4b25      	ldr	r3, [pc, #148]	@ (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd0:	4a24      	ldr	r2, [pc, #144]	@ (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cd8:	4b22      	ldr	r3, [pc, #136]	@ (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ce4:	f7ff fa16 	bl	8002114 <HAL_PWREx_GetVoltageRange>
 8002ce8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cea:	4b1e      	ldr	r3, [pc, #120]	@ (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cee:	4a1d      	ldr	r2, [pc, #116]	@ (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cfc:	d10b      	bne.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b80      	cmp	r3, #128	@ 0x80
 8002d02:	d919      	bls.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d08:	d902      	bls.n	8002d10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	e013      	b.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d10:	2301      	movs	r3, #1
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	e010      	b.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b80      	cmp	r3, #128	@ 0x80
 8002d1a:	d902      	bls.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	e00a      	b.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b80      	cmp	r3, #128	@ 0x80
 8002d26:	d102      	bne.n	8002d2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d28:	2302      	movs	r3, #2
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	e004      	b.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b70      	cmp	r3, #112	@ 0x70
 8002d32:	d101      	bne.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d34:	2301      	movs	r3, #1
 8002d36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 0207 	bic.w	r2, r3, #7
 8002d40:	4909      	ldr	r1, [pc, #36]	@ (8002d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d48:	4b07      	ldr	r3, [pc, #28]	@ (8002d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d001      	beq.n	8002d5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40022000 	.word	0x40022000

08002d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d74:	2300      	movs	r3, #0
 8002d76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d78:	2300      	movs	r3, #0
 8002d7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d041      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d90:	d02a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d96:	d824      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002da2:	d81e      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002da8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dac:	d010      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dae:	e018      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002db0:	4b86      	ldr	r3, [pc, #536]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a85      	ldr	r2, [pc, #532]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dbc:	e015      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fabb 	bl	8003340 <RCCEx_PLLSAI1_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dce:	e00c      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3320      	adds	r3, #32
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fba6 	bl	8003528 <RCCEx_PLLSAI2_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002de0:	e003      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	74fb      	strb	r3, [r7, #19]
      break;
 8002de6:	e000      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002df0:	4b76      	ldr	r3, [pc, #472]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dfe:	4973      	ldr	r1, [pc, #460]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e06:	e001      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d041      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e20:	d02a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e26:	d824      	bhi.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e32:	d81e      	bhi.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e3c:	d010      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e3e:	e018      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e40:	4b62      	ldr	r3, [pc, #392]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a61      	ldr	r2, [pc, #388]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e4c:	e015      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2100      	movs	r1, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fa73 	bl	8003340 <RCCEx_PLLSAI1_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e5e:	e00c      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3320      	adds	r3, #32
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fb5e 	bl	8003528 <RCCEx_PLLSAI2_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e70:	e003      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	74fb      	strb	r3, [r7, #19]
      break;
 8002e76:	e000      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e7a:	7cfb      	ldrb	r3, [r7, #19]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10b      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e80:	4b52      	ldr	r3, [pc, #328]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e8e:	494f      	ldr	r1, [pc, #316]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e96:	e001      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a0 	beq.w	8002fea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eae:	4b47      	ldr	r3, [pc, #284]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b41      	ldr	r3, [pc, #260]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	4a40      	ldr	r2, [pc, #256]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002edc:	2301      	movs	r3, #1
 8002ede:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a3a      	ldr	r2, [pc, #232]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eec:	f7fd fc18 	bl	8000720 <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ef2:	e009      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef4:	f7fd fc14 	bl	8000720 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d902      	bls.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	74fb      	strb	r3, [r7, #19]
        break;
 8002f06:	e005      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f08:	4b31      	ldr	r3, [pc, #196]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ef      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d15c      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01f      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d019      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f38:	4b24      	ldr	r3, [pc, #144]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f44:	4b21      	ldr	r3, [pc, #132]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4a:	4a20      	ldr	r2, [pc, #128]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f54:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f64:	4a19      	ldr	r2, [pc, #100]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7fd fbd3 	bl	8000720 <HAL_GetTick>
 8002f7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7c:	e00b      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fd fbcf 	bl	8000720 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d902      	bls.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	74fb      	strb	r3, [r7, #19]
            break;
 8002f94:	e006      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f96:	4b0d      	ldr	r3, [pc, #52]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ec      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002faa:	4b08      	ldr	r3, [pc, #32]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fba:	4904      	ldr	r1, [pc, #16]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fc2:	e009      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	74bb      	strb	r3, [r7, #18]
 8002fc8:	e006      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd8:	7c7b      	ldrb	r3, [r7, #17]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fde:	4b9e      	ldr	r3, [pc, #632]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe2:	4a9d      	ldr	r2, [pc, #628]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fe8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ff6:	4b98      	ldr	r3, [pc, #608]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffc:	f023 0203 	bic.w	r2, r3, #3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003004:	4994      	ldr	r1, [pc, #592]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003018:	4b8f      	ldr	r3, [pc, #572]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	f023 020c 	bic.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003026:	498c      	ldr	r1, [pc, #560]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800303a:	4b87      	ldr	r3, [pc, #540]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003040:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	4983      	ldr	r1, [pc, #524]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800305c:	4b7e      	ldr	r3, [pc, #504]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003062:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306a:	497b      	ldr	r1, [pc, #492]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800307e:	4b76      	ldr	r3, [pc, #472]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003084:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800308c:	4972      	ldr	r1, [pc, #456]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030a0:	4b6d      	ldr	r3, [pc, #436]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	496a      	ldr	r1, [pc, #424]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030c2:	4b65      	ldr	r3, [pc, #404]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d0:	4961      	ldr	r1, [pc, #388]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030e4:	4b5c      	ldr	r3, [pc, #368]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f2:	4959      	ldr	r1, [pc, #356]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003106:	4b54      	ldr	r3, [pc, #336]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003114:	4950      	ldr	r1, [pc, #320]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003128:	4b4b      	ldr	r3, [pc, #300]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003136:	4948      	ldr	r1, [pc, #288]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800314a:	4b43      	ldr	r3, [pc, #268]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003150:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003158:	493f      	ldr	r1, [pc, #252]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d028      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800316c:	4b3a      	ldr	r3, [pc, #232]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800317a:	4937      	ldr	r1, [pc, #220]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800318a:	d106      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800318c:	4b32      	ldr	r3, [pc, #200]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a31      	ldr	r2, [pc, #196]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003196:	60d3      	str	r3, [r2, #12]
 8003198:	e011      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800319e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031a2:	d10c      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	2101      	movs	r1, #1
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f8c8 	bl	8003340 <RCCEx_PLLSAI1_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d028      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031ca:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d8:	491f      	ldr	r1, [pc, #124]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031e8:	d106      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031f4:	60d3      	str	r3, [r2, #12]
 80031f6:	e011      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003200:	d10c      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	2101      	movs	r1, #1
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f899 	bl	8003340 <RCCEx_PLLSAI1_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d02b      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003236:	4908      	ldr	r1, [pc, #32]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003246:	d109      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a02      	ldr	r2, [pc, #8]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003252:	60d3      	str	r3, [r2, #12]
 8003254:	e014      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003260:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003264:	d10c      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3304      	adds	r3, #4
 800326a:	2101      	movs	r1, #1
 800326c:	4618      	mov	r0, r3
 800326e:	f000 f867 	bl	8003340 <RCCEx_PLLSAI1_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02f      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800328c:	4b2b      	ldr	r3, [pc, #172]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003292:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800329a:	4928      	ldr	r1, [pc, #160]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032aa:	d10d      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	2102      	movs	r1, #2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f844 	bl	8003340 <RCCEx_PLLSAI1_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d014      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032c2:	7cfb      	ldrb	r3, [r7, #19]
 80032c4:	74bb      	strb	r3, [r7, #18]
 80032c6:	e011      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032d0:	d10c      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3320      	adds	r3, #32
 80032d6:	2102      	movs	r1, #2
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 f925 	bl	8003528 <RCCEx_PLLSAI2_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032f8:	4b10      	ldr	r3, [pc, #64]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003306:	490d      	ldr	r1, [pc, #52]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00b      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800331a:	4b08      	ldr	r3, [pc, #32]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003320:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800332a:	4904      	ldr	r1, [pc, #16]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003332:	7cbb      	ldrb	r3, [r7, #18]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000

08003340 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800334e:	4b75      	ldr	r3, [pc, #468]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d018      	beq.n	800338c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800335a:	4b72      	ldr	r3, [pc, #456]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0203 	and.w	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d10d      	bne.n	8003386 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
       ||
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003372:	4b6c      	ldr	r3, [pc, #432]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
       ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d047      	beq.n	8003416 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
 800338a:	e044      	b.n	8003416 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d018      	beq.n	80033c6 <RCCEx_PLLSAI1_Config+0x86>
 8003394:	2b03      	cmp	r3, #3
 8003396:	d825      	bhi.n	80033e4 <RCCEx_PLLSAI1_Config+0xa4>
 8003398:	2b01      	cmp	r3, #1
 800339a:	d002      	beq.n	80033a2 <RCCEx_PLLSAI1_Config+0x62>
 800339c:	2b02      	cmp	r3, #2
 800339e:	d009      	beq.n	80033b4 <RCCEx_PLLSAI1_Config+0x74>
 80033a0:	e020      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033a2:	4b60      	ldr	r3, [pc, #384]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d11d      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b2:	e01a      	b.n	80033ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033b4:	4b5b      	ldr	r3, [pc, #364]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c4:	e013      	b.n	80033ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033c6:	4b57      	ldr	r3, [pc, #348]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033d2:	4b54      	ldr	r3, [pc, #336]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033e2:	e006      	b.n	80033f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e004      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ea:	bf00      	nop
 80033ec:	e002      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10d      	bne.n	8003416 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	430b      	orrs	r3, r1
 8003410:	4944      	ldr	r1, [pc, #272]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d17d      	bne.n	8003518 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800341c:	4b41      	ldr	r3, [pc, #260]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a40      	ldr	r2, [pc, #256]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003422:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003428:	f7fd f97a 	bl	8000720 <HAL_GetTick>
 800342c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800342e:	e009      	b.n	8003444 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003430:	f7fd f976 	bl	8000720 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	73fb      	strb	r3, [r7, #15]
        break;
 8003442:	e005      	b.n	8003450 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003444:	4b37      	ldr	r3, [pc, #220]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ef      	bne.n	8003430 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d160      	bne.n	8003518 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d111      	bne.n	8003480 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800345c:	4b31      	ldr	r3, [pc, #196]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6892      	ldr	r2, [r2, #8]
 800346c:	0211      	lsls	r1, r2, #8
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68d2      	ldr	r2, [r2, #12]
 8003472:	0912      	lsrs	r2, r2, #4
 8003474:	0452      	lsls	r2, r2, #17
 8003476:	430a      	orrs	r2, r1
 8003478:	492a      	ldr	r1, [pc, #168]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	610b      	str	r3, [r1, #16]
 800347e:	e027      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d112      	bne.n	80034ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003486:	4b27      	ldr	r3, [pc, #156]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800348e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6892      	ldr	r2, [r2, #8]
 8003496:	0211      	lsls	r1, r2, #8
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6912      	ldr	r2, [r2, #16]
 800349c:	0852      	lsrs	r2, r2, #1
 800349e:	3a01      	subs	r2, #1
 80034a0:	0552      	lsls	r2, r2, #21
 80034a2:	430a      	orrs	r2, r1
 80034a4:	491f      	ldr	r1, [pc, #124]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	610b      	str	r3, [r1, #16]
 80034aa:	e011      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80034b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6892      	ldr	r2, [r2, #8]
 80034bc:	0211      	lsls	r1, r2, #8
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6952      	ldr	r2, [r2, #20]
 80034c2:	0852      	lsrs	r2, r2, #1
 80034c4:	3a01      	subs	r2, #1
 80034c6:	0652      	lsls	r2, r2, #25
 80034c8:	430a      	orrs	r2, r1
 80034ca:	4916      	ldr	r1, [pc, #88]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034d0:	4b14      	ldr	r3, [pc, #80]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a13      	ldr	r2, [pc, #76]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fd f920 	bl	8000720 <HAL_GetTick>
 80034e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034e2:	e009      	b.n	80034f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034e4:	f7fd f91c 	bl	8000720 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d902      	bls.n	80034f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	73fb      	strb	r3, [r7, #15]
          break;
 80034f6:	e005      	b.n	8003504 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ef      	beq.n	80034e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	4904      	ldr	r1, [pc, #16]	@ (8003524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003514:	4313      	orrs	r3, r2
 8003516:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000

08003528 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003536:	4b6a      	ldr	r3, [pc, #424]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d018      	beq.n	8003574 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003542:	4b67      	ldr	r3, [pc, #412]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0203 	and.w	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d10d      	bne.n	800356e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
       ||
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800355a:	4b61      	ldr	r3, [pc, #388]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
       ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d047      	beq.n	80035fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	e044      	b.n	80035fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d018      	beq.n	80035ae <RCCEx_PLLSAI2_Config+0x86>
 800357c:	2b03      	cmp	r3, #3
 800357e:	d825      	bhi.n	80035cc <RCCEx_PLLSAI2_Config+0xa4>
 8003580:	2b01      	cmp	r3, #1
 8003582:	d002      	beq.n	800358a <RCCEx_PLLSAI2_Config+0x62>
 8003584:	2b02      	cmp	r3, #2
 8003586:	d009      	beq.n	800359c <RCCEx_PLLSAI2_Config+0x74>
 8003588:	e020      	b.n	80035cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800358a:	4b55      	ldr	r3, [pc, #340]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d11d      	bne.n	80035d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359a:	e01a      	b.n	80035d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800359c:	4b50      	ldr	r3, [pc, #320]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d116      	bne.n	80035d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ac:	e013      	b.n	80035d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035ae:	4b4c      	ldr	r3, [pc, #304]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035ba:	4b49      	ldr	r3, [pc, #292]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035ca:	e006      	b.n	80035da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
      break;
 80035d0:	e004      	b.n	80035dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035d2:	bf00      	nop
 80035d4:	e002      	b.n	80035dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035da:	bf00      	nop
    }

    if(status == HAL_OK)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10d      	bne.n	80035fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035e2:	4b3f      	ldr	r3, [pc, #252]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	430b      	orrs	r3, r1
 80035f8:	4939      	ldr	r1, [pc, #228]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d167      	bne.n	80036d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003604:	4b36      	ldr	r3, [pc, #216]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a35      	ldr	r2, [pc, #212]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800360e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003610:	f7fd f886 	bl	8000720 <HAL_GetTick>
 8003614:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003616:	e009      	b.n	800362c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003618:	f7fd f882 	bl	8000720 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d902      	bls.n	800362c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	73fb      	strb	r3, [r7, #15]
        break;
 800362a:	e005      	b.n	8003638 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800362c:	4b2c      	ldr	r3, [pc, #176]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ef      	bne.n	8003618 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d14a      	bne.n	80036d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d111      	bne.n	8003668 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003644:	4b26      	ldr	r3, [pc, #152]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800364c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6892      	ldr	r2, [r2, #8]
 8003654:	0211      	lsls	r1, r2, #8
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68d2      	ldr	r2, [r2, #12]
 800365a:	0912      	lsrs	r2, r2, #4
 800365c:	0452      	lsls	r2, r2, #17
 800365e:	430a      	orrs	r2, r1
 8003660:	491f      	ldr	r1, [pc, #124]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003662:	4313      	orrs	r3, r2
 8003664:	614b      	str	r3, [r1, #20]
 8003666:	e011      	b.n	800368c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003668:	4b1d      	ldr	r3, [pc, #116]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003670:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6892      	ldr	r2, [r2, #8]
 8003678:	0211      	lsls	r1, r2, #8
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6912      	ldr	r2, [r2, #16]
 800367e:	0852      	lsrs	r2, r2, #1
 8003680:	3a01      	subs	r2, #1
 8003682:	0652      	lsls	r2, r2, #25
 8003684:	430a      	orrs	r2, r1
 8003686:	4916      	ldr	r1, [pc, #88]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003688:	4313      	orrs	r3, r2
 800368a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800368c:	4b14      	ldr	r3, [pc, #80]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a13      	ldr	r2, [pc, #76]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003696:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003698:	f7fd f842 	bl	8000720 <HAL_GetTick>
 800369c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800369e:	e009      	b.n	80036b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036a0:	f7fd f83e 	bl	8000720 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d902      	bls.n	80036b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	73fb      	strb	r3, [r7, #15]
          break;
 80036b2:	e005      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036b4:	4b0a      	ldr	r3, [pc, #40]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ef      	beq.n	80036a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036c6:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	4904      	ldr	r1, [pc, #16]	@ (80036e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000

080036e4 <memset>:
 80036e4:	4402      	add	r2, r0
 80036e6:	4603      	mov	r3, r0
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d100      	bne.n	80036ee <memset+0xa>
 80036ec:	4770      	bx	lr
 80036ee:	f803 1b01 	strb.w	r1, [r3], #1
 80036f2:	e7f9      	b.n	80036e8 <memset+0x4>

080036f4 <__libc_init_array>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	4d0d      	ldr	r5, [pc, #52]	@ (800372c <__libc_init_array+0x38>)
 80036f8:	4c0d      	ldr	r4, [pc, #52]	@ (8003730 <__libc_init_array+0x3c>)
 80036fa:	1b64      	subs	r4, r4, r5
 80036fc:	10a4      	asrs	r4, r4, #2
 80036fe:	2600      	movs	r6, #0
 8003700:	42a6      	cmp	r6, r4
 8003702:	d109      	bne.n	8003718 <__libc_init_array+0x24>
 8003704:	4d0b      	ldr	r5, [pc, #44]	@ (8003734 <__libc_init_array+0x40>)
 8003706:	4c0c      	ldr	r4, [pc, #48]	@ (8003738 <__libc_init_array+0x44>)
 8003708:	f000 f818 	bl	800373c <_init>
 800370c:	1b64      	subs	r4, r4, r5
 800370e:	10a4      	asrs	r4, r4, #2
 8003710:	2600      	movs	r6, #0
 8003712:	42a6      	cmp	r6, r4
 8003714:	d105      	bne.n	8003722 <__libc_init_array+0x2e>
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	f855 3b04 	ldr.w	r3, [r5], #4
 800371c:	4798      	blx	r3
 800371e:	3601      	adds	r6, #1
 8003720:	e7ee      	b.n	8003700 <__libc_init_array+0xc>
 8003722:	f855 3b04 	ldr.w	r3, [r5], #4
 8003726:	4798      	blx	r3
 8003728:	3601      	adds	r6, #1
 800372a:	e7f2      	b.n	8003712 <__libc_init_array+0x1e>
 800372c:	08003794 	.word	0x08003794
 8003730:	08003794 	.word	0x08003794
 8003734:	08003794 	.word	0x08003794
 8003738:	08003798 	.word	0x08003798

0800373c <_init>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	bf00      	nop
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr

08003748 <_fini>:
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	bf00      	nop
 800374c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374e:	bc08      	pop	{r3}
 8003750:	469e      	mov	lr, r3
 8003752:	4770      	bx	lr
